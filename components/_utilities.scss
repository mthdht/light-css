// All kinds of utilities for margin, padding, display, flex ...

// space variables
$space-default: 1rem;
$spaces: (
        0: 0,
        1: ($space-default * 0.25),
        2: ($space-default * 0.5),
        3: $space-default,
        4: ($space-default * 1.5),
        5: ($space-default * 3)
);

// Margin and padding
$space-properties: ("margin", "padding");

@each $prop in $space-properties {
  @each $space, $value in $spaces {
    .#{$prop}-#{$space} {
      #{$prop}: $value;
    }
    .#{$prop}-#{$space}-v,
    .#{$prop}-#{$space}-t {
      #{$prop}-top: $value;
    }

    .#{$prop}-#{$space}-v,
    .#{$prop}-#{$space}-b {
      #{$prop}-bottom: $value;
    }

    .#{$prop}-#{$space}-h,
    .#{$prop}-#{$space}-l {
      #{$prop}-left: $value;
    }

    .#{$prop}-#{$space}-h,
    .#{$prop}-#{$space}-r {
      #{$prop}-right: $value;
    }
  }
}

// Sizes
$sizes-props: ("width", "height");
$sizes: (0, 25, 50, 75, 100);

@each $prop in $sizes-props {
  @each $size in $sizes {
    .#{$prop}-#{$size} {
      #{$prop}: $size * 1%;
    }
    @if $size == 100 {
      .#{$prop}-#{$size} {
        max-#{$prop}: $size * 1%;
      }
    }
  }
}


// Borders
$border-sizes: (
        0: 0,
        1: 1,
        2: 3,
        3: 6,
        4: 10,
        5: 15
);

$border-radius: (
        0: 0,
        1: .25rem,
        2: 2rem,
        3: 3rem,
        "circle": 50%
);

.border {
  border: 1px solid black;
}

@each $border, $size in $border-sizes {
  @each $card in ("top","bottom","left", "right") {
    .border-#{$card}-#{$border} {
      border-#{$card}: solid black;
      border-#{$card}-width: $size + px !important;
    }
    .border-#{$card} {
      border-#{$card}: 3px solid black;
    }
  }
  .border-#{$border} {
    border: $size + px solid black;
  }
}

@each $color-name, $color in $colors {
  .border-#{$color-name} {
    border-color: map_get($color, "base");
  }
}

@each $attr, $radius in $border-radius {
  @if $attr =="circle" {
    .#{$attr} {
      border-radius: $radius;
    }
  }
  @else {
    .round-#{$attr} {
      border-radius: $radius;
    }
  }
}

// Displays
$displays: (block, inline, inline-block, flex, hide);

@each $display in $displays {
  .#{$display} {
    display: $display;
  }
}

// Flexbox

.justify-content-start   { justify-content: flex-start !important; }
.justify-content-end     { justify-content: flex-end !important; }
.justify-content-center  { justify-content: center !important; }
.justify-content-between { justify-content: space-between !important; }
.justify-content-around  { justify-content: space-around !important; }

.align-items-start    { align-items: flex-start !important; }
.align-items-end      { align-items: flex-end !important; }
.align-items-center   { align-items: center !important; }
.align-items-baseline { align-items: baseline !important; }
.align-items-stretch  { align-items: stretch !important; }

.align-content-start   { align-content: flex-start !important; }
.align-content-end     { align-content: flex-end !important; }
.align-content-center  { align-content: center !important; }
.align-content-between { align-content: space-between !important; }
.align-content-around  { align-content: space-around !important; }
.align-content-stretch { align-content: stretch !important; }

.align-self-auto     { align-self: auto !important; }
.align-self-start    { align-self: flex-start !important; }
.align-self-end      { align-self: flex-end !important; }
.align-self-center   { align-self: center !important; }
.align-self-baseline { align-self: baseline !important; }
.align-self-stretch  { align-self: stretch !important; }

@for $i from 1 through 12 {
  .order-#{$i} {
    order: $i;
  }
}
.flex-row {
  flex-direction: row;
}
.flex-column {
  flex-direction: column;
}